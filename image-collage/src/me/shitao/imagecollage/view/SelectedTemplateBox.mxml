<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx" 
				   xmlns:view="me.shitao.imagecollage.view.*"
				   creationComplete="onCreationComplete(event);"
				   addedToStage="onAddedToStage(event);"
				   removedFromStage="onRemoveFromStage(event);">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import me.shitao.imagecollage.event.ValueEvent;
			import me.shitao.imagecollage.vo.CollageLayoutVo;
			import me.shitao.imagecollage.vo.ScaleVo;
			
			import mx.controls.Image;
			import mx.core.UIComponent;
			import mx.events.FlexEvent;
			import mx.graphics.codec.JPEGEncoder;
			import mx.graphics.codec.PNGEncoder;
			import mx.managers.PopUpManager;
			import mx.utils.UIDUtil;
			
			private var _selectedTemplate:CollageLayoutVo;
			[Bindable]
			private var _scale:ScaleVo;
			private var _imageDatas:Array = [];
			
			public function get selectedTemplate():CollageLayoutVo
			{
				return _selectedTemplate;
			}
			
			public function  set selectedTemplate(value:CollageLayoutVo):void
			{
				if(_selectedTemplate != value)
				{
					_selectedTemplate = value;
					generateView();
					this.dispatchEvent(new Event("selectedTemplateChanged"));
				}
			}
			
			private function generateView():void
			{
				if(_selectedTemplate)
				{
					getImageDatas();
					container.removeAllElements();
					var wp:Rectangle = getWrapperSize();
					trace("wrapper box:" + "left=" + wp.x + ",top="+wp.y+",width="+wp.width+",height="+wp.height);
					borderContainer.width = wrapper.width * (wp.width/100);
					borderContainer.height = wrapper.height * (wp.height/100);
					var xs:Number = (borderContainer.width)/(wp.width + 4);
					var ys:Number = (borderContainer.height)/(wp.height + 4);
					for each(var rect:Rectangle in _selectedTemplate.rects)
					{
						var bc:ImageBox = new ImageBox();
						bc.x = Math.floor((rect.left - wp.left + 2) * xs);
						bc.y = Math.floor((rect.top - wp.top + 2) * ys);
						bc.width = Math.floor((rect.right - rect.left) * xs);
						bc.height = Math.floor((rect.bottom  - rect.top) * ys);
						bc.setStyle("backgroundColor", "#cccccc");
						container.addElement(bc);
						trace("image box:" + "left=" + bc.x + ",top="+bc.y+",width="+bc.width+",height="+bc.height);
						if(_imageDatas.length != 0){
							bc.setImageData(_imageDatas.pop());
						}
					}
				}
			}
			
			private function getWrapperSize():Rectangle
			{
				var left:int = 0;
				var top:int = 0;
				var right:int = 100;
				var bottom:int = 100;
				for(var i:int = 0; i < _selectedTemplate.rects.length; i++)
				{
					var rect:Rectangle = _selectedTemplate.rects[i];
					if(i == 0){
						left = rect.left;
						top = rect.top;
						right = rect.right;
						bottom = rect.bottom;
					}else{
						if(rect.left < left){
							left = rect.left;
						}
						if(rect.right > right){
							right = rect.right;
						}
						if(rect.top < top)
						{
							top = rect.top;
						}
						if(rect.bottom > bottom)
						{
							bottom = rect.bottom;
						}
					}					
				}
				return new Rectangle(left, top, right-left, bottom-top);
			}
			
			private function getImageDatas():void
			{
				_imageDatas.splice();
				for (var i:int = 0; i < container.numElements; i++)
				{
					var e:ImageBox = container.getElementAt(i) as ImageBox;
					var imageData:ByteArray = e.getImageData();
					if(imageData)
					{
						_imageDatas.push(imageData);
					}
				}
			}
			
			private function onCreationComplete(event:FlexEvent):void
			{
				addEventListener("showScaleBar", showScaleBarHandler);
			}
			
			private function onAddedToStage(event:Event):void
			{
				stage.addEventListener(MouseEvent.CLICK, stageClickHandler);
			}
			
			private function onRemoveFromStage(event:Event):void
			{
				stage.removeEventListener(MouseEvent.CLICK, stageClickHandler);
			}
			
			private function stageClickHandler(event:MouseEvent):void
			{
				if(!isChildrenOfContainer(event.target, scaleBar))
				{
					scaleBar.visible = false;
					scaleBar.includeInLayout = false;
				}
			}
			
			private function isChildrenOfContainer(o:Object, c:Object):Boolean
			{
				if(o && o.parent && (o == c || o.parent == c))
				{
					return true;
				}
				else if(o && o.parent) 
				{
					return isChildrenOfContainer(o.parent, c);			
				}
				else
				{
					return false;
				}
			}
			
			private function showScaleBarHandler(event:ValueEvent):void
			{
				scaleBar.scale = event.data.scale as ScaleVo;
				scaleBar.setScale(scaleBar.scale.currentValue);
				scaleBar.visible = true;
				scaleBar.includeInLayout = true;
			}
			
			private function getBitmapData():BitmapData
			{
				var bd:BitmapData = new BitmapData( container.width, container.height );
				var m:Matrix = new Matrix();
				bd.draw(container, m);
				return bd;
			}
			
			private function previewBtn_clickHandler(event:MouseEvent):void
			{
				var preview:ImagePreview = new ImagePreview();
				preview.bitmapData = getBitmapData();
				PopUpManager.addPopUp(preview, parentApplication.systemManager, true);
				PopUpManager.centerPopUp(preview);
			}
			
			private function submitBtn_clickHandler(event:MouseEvent):void
			{
				var byteArr:ByteArray =new PNGEncoder().encode(getBitmapData());  
				var fileRefer:FileReference = new FileReference();  
				fileRefer.save(byteArr,new Date().time+".png");  
			}
		]]>
	</fx:Script>
	<s:Group width="100%" height="100%">
		<s:layout>
			<s:VerticalLayout gap="10" horizontalAlign="center" verticalAlign="middle"
							  paddingLeft="10" paddingRight="10" paddingTop="10" paddingBottom="10"/>
		</s:layout>
		<s:Group id="wrapper" width="100%" height="100%">
			<s:layout>
				<s:VerticalLayout horizontalAlign="center" verticalAlign="middle"/>
			</s:layout>
			<s:BorderContainer id="borderContainer" 
							   skinClass="me.shitao.imagecollage.skin.WrapperContainerSkin">
				<!--s:Group id="wrapper" width="100%" height="100%">
				<s:layout>
				<s:VerticalLayout gap="0" horizontalAlign="center" verticalAlign="middle"/>
				</s:layout>
				<s:Group id="container" width="100%" height="100%"/>	
				</s:Group -->
				<s:Group id="container" width="100%" height="100%"/>
			</s:BorderContainer>
		</s:Group>
		<s:Group id="controlbar" width="100%" >
			<s:layout>
				<s:HorizontalLayout gap="10" horizontalAlign="right" verticalAlign="middle"/>
			</s:layout>
			<s:Button id="previewBtn" label="预览" click="previewBtn_clickHandler(event);" />
			<s:Button id="submitBtn" label="提交" click="submitBtn_clickHandler(event);" />
			<s:Button label="取消" />
		</s:Group>
	</s:Group>
	<view:ScaleBar id="scaleBar" includeInLayout="false" visible="false"/>
</s:BorderContainer>
